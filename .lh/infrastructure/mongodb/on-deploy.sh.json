{
    "sourceFile": "infrastructure/mongodb/on-deploy.sh",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1677143654514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1677143654514,
            "name": "Commit-0",
            "content": "\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at https://mozilla.org/MPL/2.0/.\n#\n# OpenCRVS is also distributed under the terms of the Civil Registration\n# & Healthcare Disclaimer located at http://opencrvs.org/license.\n#\n# Copyright (C) The OpenCRVS Authors. OpenCRVS and the OpenCRVS\n# graphic logo are (registered/a) trademark(s) of Plan International.\n\n# This file is run on each deployment with the sole purpose of updating\n# passwords of MongoDB users to passwords given to this service as environment varibles\n\napt-get update\napt-get install -y curl\n\ncurl -L https://github.com/ufoscout/docker-compose-wait/releases/download/2.9.0/wait --output /wait\nchmod +x /wait\n\nif [ \"$REPLICAS\" = \"1\" ]; then\n  WAIT_TIMEOUT=240 WAIT_HOSTS=mongo1:27017 /wait\nelif [ \"$REPLICAS\" = \"3\" ]; then\n  WAIT_TIMEOUT=240 WAIT_HOSTS=mongo1:27017,mongo2:27017,mongo3:27017 /wait\nelif [ \"$REPLICAS\" = \"5\" ]; then\n  WAIT_TIMEOUT=240 WAIT_HOSTS=mongo1:27017,mongo2:27017,mongo3:27017,mongo4:27017,mongo5:27017 /wait\nelse\n  echo \"Script must be passed an understandable number of replicas: 0,1,3 or 5\"\n  exit 1\nfi\n\n\nmongo_credentials() {\n  if [ ! -z ${MONGODB_ADMIN_USER+x} ] || [ ! -z ${MONGODB_ADMIN_PASSWORD+x} ]; then\n    echo \"--username $MONGODB_ADMIN_USER --password $MONGODB_ADMIN_PASSWORD --authenticationDatabase admin\";\n  else\n    echo \"\";\n  fi\n}\n\n# Initialise replica sets\nif [ \"$REPLICAS\" = \"1\" ]; then\n  mongo $(mongo_credentials) --host mongo1 --eval \"rs.initiate({_id:\\\"rs0\\\",members:[{_id:0,host:\\\"mongo1:27017\\\"}]})\"\n  HOST=rs0/mongo1\nelif [ \"$REPLICAS\" = \"3\" ]; then\n  mongo $(mongo_credentials) --host mongo1 --eval \"rs.initiate({_id:\\\"rs0\\\",members:[{_id:0,host:\\\"mongo1:27017\\\"},{_id:1,host:\\\"mongo2:27017\\\"},{_id:2,host:\\\"mongo3:27017\\\"}]})\"\n  HOST=rs0/mongo1,mongo2,mongo3\nelif [ \"$REPLICAS\" = \"5\" ]; then\n  mongo $(mongo_credentials) --host mongo1 --eval \"rs.initiate({_id:\\\"rs0\\\",members:[{_id:0,host:\\\"mongo1:27017\\\"},{_id:1,host:\\\"mongo2:27017\\\"},{_id:2,host:\\\"mongo3:27017\\\"},{_id:3,host:\\\"mongo4:27017\\\"},{_id:4,host:\\\"mongo5:27017\\\"}]})\"\n  HOST=rs0/mongo1,mongo2,mongo3,mongo4,mongo5\nelse\n  echo \"Script must be passed an understandable number of replicas: 0,1,3 or 5\"\n  exit 1\nfi\n\nfunction checkIfUserExists {\n  local user=$1\n  local JSON=\"{\\\"user\\\": \\\"$user\\\"}\"\n  CMD='mongo admin --host $HOST $(mongo_credentials) --quiet --eval \"db.getCollection(\\\"system.users\\\").find($JSON).length() > 0 ? \\\"FOUND\\\" : \\\"NOT_FOUND\\\"\"'\n  eval $CMD\n}\n\n# Rotate passwords to match the ones given to this script or create new users\n\nCONFIG_USER=$(echo $(checkIfUserExists \"config\"))\nif [[ $CONFIG_USER != \"FOUND\" ]]; then\n  echo \"config user not found\"\n  mongo $(mongo_credentials) --host $HOST <<EOF\n  use application-config\n  db.createUser({\n    user: 'config',\n    pwd: '$CONFIG_MONGODB_PASSWORD',\n    roles: [{ role: 'readWrite', db: 'application-config' }]\n  })\nEOF\nelse\n  echo \"config user exists\"\n  mongo $(mongo_credentials) --host $HOST <<EOF\n  use application-config\n  db.updateUser('config', {\n    pwd: '$CONFIG_MONGODB_PASSWORD'\n  })\nEOF\nfi\n\nHEARTH_USER=$(echo $(checkIfUserExists \"hearth\"))\nif [[ $HEARTH_USER != \"FOUND\" ]]; then\n  echo \"hearth user not found\"\n  mongo $(mongo_credentials) --host $HOST <<EOF\n  use hearth-dev\n  db.createUser({\n    user: 'hearth',\n    pwd: '$HEARTH_MONGODB_PASSWORD',\n    roles: [{ role: 'readWrite', db: 'hearth' }, { role: 'readWrite', db: 'performance' }, { role: 'readWrite', db: 'hearth-dev' }]\n  })\nEOF\nelse\n  echo \"hearth user exists\"\n  mongo $(mongo_credentials) --host $HOST <<EOF\n  use hearth-dev\n  db.updateUser('hearth', {\n    pwd: '$HEARTH_MONGODB_PASSWORD',\n    roles: [{ role: 'readWrite', db: 'hearth' }, { role: 'readWrite', db: 'performance' }, { role: 'readWrite', db: 'hearth-dev' }]\n  })\nEOF\nfi\n\nUSER_MGNT_USER=$(echo $(checkIfUserExists \"user-mgnt\"))\nif [[ $USER_MGNT_USER != \"FOUND\" ]]; then\n  echo \"user-mgnt user not found\"\n  mongo $(mongo_credentials) --host $HOST <<EOF\n  use user-mgnt\n  db.createUser({\n    user: 'user-mgnt',\n    pwd: '$USER_MGNT_MONGODB_PASSWORD',\n    roles: [{ role: 'readWrite', db: 'user-mgnt' }]\n  })\nEOF\nelse\n  echo \"user-mgnt user exists\"\n  mongo $(mongo_credentials) --host $HOST <<EOF\n  use user-mgnt\n  db.updateUser('user-mgnt', {\n    pwd: '$USER_MGNT_MONGODB_PASSWORD'\n  })\nEOF\nfi\n\nOPENHIM_USER=$(echo $(checkIfUserExists \"openhim\"))\nif [[ $OPENHIM_USER != \"FOUND\" ]]; then\n  echo \"openhim user not found\"\n  mongo $(mongo_credentials) --host $HOST <<EOF\n  use openhim-dev\n  db.createUser({\n    user: 'openhim',\n    pwd: '$OPENHIM_MONGODB_PASSWORD',\n    roles: [{ role: 'readWrite', db: 'openhim' }, { role: 'readWrite', db: 'openhim-dev' }]\n  })\nEOF\nelse\n  echo \"openhim user exists\"\n  mongo $(mongo_credentials) --host $HOST <<EOF\n  use openhim-dev\n  db.updateUser('openhim', {\n    pwd: '$OPENHIM_MONGODB_PASSWORD'\n  })\nEOF\nfi\n\nMETRICS_USER=$(echo $(checkIfUserExists \"metrics\"))\nif [[ $METRICS_USER != \"FOUND\" ]]; then\n  echo \"metrics user not found\"\n  mongo $(mongo_credentials) --host $HOST <<EOF\n  use metrics\n  db.createUser({\n    user: 'metrics',\n    pwd: '$METRICS_MONGODB_PASSWORD',\n    roles: [{ role: 'readWrite', db: 'metrics' }]\n  })\nEOF\nelse\n  echo \"metrics user exists\"\n  mongo $(mongo_credentials) --host $HOST <<EOF\n  use metrics\n  db.updateUser('metrics', {\n    pwd: '$METRICS_MONGODB_PASSWORD'\n  })\nEOF\nfi\n\nWEBHOOKS_USER=$(echo $(checkIfUserExists \"webhooks\"))\nif [[ $WEBHOOKS_USER != \"FOUND\" ]]; then\n  echo \"webhooks user not found\"\n  mongo $(mongo_credentials) --host $HOST <<EOF\n  use webhooks\n  db.createUser({\n    user: 'webhooks',\n    pwd: '$WEBHOOKS_MONGODB_PASSWORD',\n    roles: [{ role: 'readWrite', db: 'webhooks' }]\n  })\nEOF\nelse\n  echo \"webhooks user exists\"\n  mongo $(mongo_credentials) --host $HOST <<EOF\n  use webhooks\n  db.updateUser('webhooks', {\n    pwd: '$WEBHOOKS_MONGODB_PASSWORD'\n  })\nEOF\nfi\n"
        }
    ]
}