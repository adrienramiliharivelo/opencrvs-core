{
    "sourceFile": "packages/client/src/views/SysAdmin/Team/user/UserList.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1677161958591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1677164643957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -847,10 +847,8 @@\n       toggleUserResetPasswordModal\n     ]\n   )\n \n-  console.log(userDetails)\n-\n   return (\n     <SysAdminContentWrapper\n       changeTeamLocation={\n         (!getViewOnly(locationId, userDetails, true) && onChangeLocation) ||\n"
                }
            ],
            "date": 1677161958591,
            "name": "Commit-0",
            "content": "/*\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n *\n * OpenCRVS is also distributed under the terms of the Civil Registration\n * & Healthcare Disclaimer located at http://opencrvs.org/license.\n *\n * Copyright (C) The OpenCRVS Authors. OpenCRVS and the OpenCRVS\n * graphic logo are (registered/a) trademark(s) of Plan International.\n */\nimport { Query } from '@client/components/Query'\nimport {\n  buttonMessages,\n  constantsMessages,\n  errorMessages,\n  userMessages\n} from '@client/i18n/messages'\nimport { messages } from '@client/i18n/messages/views/sysAdmin'\nimport { messages as headerMessages } from '@client/i18n/messages/views/header'\nimport {\n  goToCreateNewUser,\n  goToCreateNewUserWithLocationId,\n  goToReviewUserDetails,\n  goToTeamSearch,\n  goToTeamUserList,\n  goToUserProfile\n} from '@client/navigation'\nimport { ILocation, IOfflineData } from '@client/offline/reducer'\nimport { getOfflineData } from '@client/offline/selectors'\nimport { IStoreState } from '@client/store'\nimport { withTheme } from '@client/styledComponents'\nimport { SEARCH_USERS } from '@client/user/queries'\nimport {\n  LANG_EN,\n  NATL_ADMIN_ROLES,\n  SYS_ADMIN_ROLES\n} from '@client/utils/constants'\nimport { createNamesMap } from '@client/utils/data-formatting'\nimport { SysAdminContentWrapper } from '@client/views/SysAdmin/SysAdminContentWrapper'\nimport {\n  getUserRoleIntlKey,\n  UserStatus\n} from '@client/views/SysAdmin/Team/utils'\nimport { LinkButton } from '@opencrvs/components/lib/buttons'\nimport { Button } from '@opencrvs/components/lib/Button'\nimport { getUserDetails } from '@client/profile/profileSelectors'\nimport {\n  AddUser,\n  VerticalThreeDots,\n  SearchRed,\n  NoWifi\n} from '@opencrvs/components/lib/icons'\nimport { AvatarSmall } from '@client/components/Avatar'\nimport { ToggleMenu } from '@opencrvs/components/lib/ToggleMenu'\nimport { ResponsiveModal } from '@opencrvs/components/lib/ResponsiveModal'\nimport { Toast } from '@opencrvs/components/lib/Toast'\nimport {\n  BodyContent,\n  Content,\n  ContentSize\n} from '@opencrvs/components/lib/Content'\nimport { ITheme } from '@opencrvs/components/lib/theme'\nimport { GQLHumanName } from '@opencrvs/gateway/src/graphql/schema'\nimport { parse } from 'query-string'\nimport * as React from 'react'\nimport {\n  injectIntl,\n  useIntl,\n  WrappedComponentProps as IntlShapeProps\n} from 'react-intl'\nimport { connect } from 'react-redux'\nimport { RouteComponentProps } from 'react-router'\nimport styled from 'styled-components'\nimport { UserAuditActionModal } from '@client/views/SysAdmin/Team/user/UserAuditActionModal'\nimport { userMutations } from '@client/user/mutations'\nimport { Pagination } from '@opencrvs/components/lib/Pagination'\nimport {\n  ListViewItemSimplified,\n  ListViewSimplified\n} from '@opencrvs/components/lib/ListViewSimplified'\nimport { useCallback } from 'react'\nimport {\n  withOnlineStatus,\n  LoadingIndicator\n} from '@client/views/OfficeHome/LoadingIndicator'\nimport { LocationPicker } from '@client/components/LocationPicker'\nimport { Query as QueryType, User } from '@client/utils/gateway'\nimport { UserDetails } from '@client/utils/userUtils'\nimport { Link } from '@opencrvs/components'\n\nconst DEFAULT_FIELD_AGENT_LIST_SIZE = 10\nconst { useState } = React\n\nconst UserTable = styled(BodyContent)`\n  padding: 0px;\n  margin: 8px auto 0;\n  @media (max-width: ${({ theme }) => theme.grid.breakpoints.md}px) {\n    padding: 0px;\n  }\n`\n\nconst ErrorText = styled.div`\n  ${({ theme }) => theme.fonts.bold16};\n  text-align: center;\n  height: 328px;\n  margin-top: 16px;\n  display: flex;\n  gap: 12px;\n  @media (max-width: ${({ theme }) => theme.grid.breakpoints.md}px) {\n    margin-top: 12px;\n    height: calc(100vh - 104px);\n  }\n`\n\nconst Loading = styled.div`\n  @media (max-width: ${({ theme }) => theme.grid.breakpoints.md}px) {\n    height: calc(100vh - 104px);\n  }\n`\n\nconst StatusBox = styled.div`\n  padding: 4px 8px;\n  ${({ theme }) => theme.fonts.bold12};\n  border-radius: 100px;\n  height: 30px;\n  text-align: center;\n  margin-left: 4px;\n`\nconst ActiveStatusBox = styled(StatusBox)`\n  background: rgba(73, 183, 141, 0.3);\n`\nconst DeactivatedStatusBox = styled(StatusBox)`\n  background: rgba(245, 209, 209, 1);\n`\nconst PendingStatusBox = styled(StatusBox)`\n  background: rgba(252, 236, 217, 1);\n`\nconst DisabledStatusBox = styled(StatusBox)`\n  background: rgba(206, 206, 206, 0.3);\n`\n\nconst AddUserIcon = styled(AddUser)`\n  cursor: pointer;\n`\n\nconst Header = styled.h1`\n  color: ${({ theme }) => theme.colors.copy};\n  ${({ theme }) => theme.fonts.h2};\n  margin: 8px 0;\n  @media (min-width: ${({ theme }) => theme.grid.breakpoints.lg}px) {\n    display: none;\n  }\n`\n\nconst LocationInfo = styled.div`\n  padding: 8px 0px;\n`\n\nconst LocationInfoValue = styled.div`\n  color: ${({ theme }) => theme.colors.supportingCopy};\n  ${({ theme }) => theme.fonts.reg18};\n`\n\nconst StatusMenuContainer = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Value = styled.span`\n  color: ${({ theme }) => theme.colors.grey500};\n  ${({ theme }) => theme.fonts.reg16}\n`\n\nconst Name = styled.span`\n  ${({ theme }) => theme.fonts.reg16}\n`\n\nconst NoRecord = styled.div<{ isFullPage?: boolean }>`\n  ${({ theme }) => theme.fonts.h3};\n  text-align: left;\n  margin-left: ${({ isFullPage }) => (isFullPage ? `40px` : `10px`)};\n  color: ${({ theme }) => theme.colors.copy};\n  margin-top: 20px;\n`\n\nconst ConnectivityContainer = styled.div`\n  height: 328px;\n  margin-top: 16px;\n  display: flex;\n  gap: 12px;\n  @media (max-width: ${({ theme }) => theme.grid.breakpoints.md}px) {\n    margin-top: 12px;\n    height: calc(100vh - 104px);\n  }\n`\nconst NoConnectivity = styled(NoWifi)`\n  width: 24px;\n`\nconst Text = styled.div`\n  ${({ theme }) => theme.fonts.reg16};\n  text-align: center;\n`\nconst LinkButtonModified = styled(LinkButton)`\n  height: 24px;\n`\n\ninterface ISearchParams {\n  locationId: string\n}\n\ntype IOnlineStatusProps = {\n  isOnline: boolean\n}\n\ntype BaseProps = {\n  theme: ITheme\n  offlineOffices: ILocation[]\n  userDetails: UserDetails | null\n  offlineCountryConfig: IOfflineData\n  goToCreateNewUser: typeof goToCreateNewUser\n  goToCreateNewUserWithLocationId: typeof goToCreateNewUserWithLocationId\n  goToReviewUserDetails: typeof goToReviewUserDetails\n  goToTeamSearch: typeof goToTeamSearch\n  goToTeamUserList: typeof goToTeamUserList\n  goToUserProfile: typeof goToUserProfile\n}\n\ntype IProps = BaseProps &\n  IntlShapeProps &\n  RouteComponentProps &\n  IOnlineStatusProps\n\ninterface IStatusProps {\n  status: string\n}\n\ninterface ToggleModal {\n  modalVisible: boolean\n  selectedUser: User | null\n}\n\nexport const Status = (statusProps: IStatusProps) => {\n  const status = statusProps.status\n  const intl = useIntl()\n  switch (status) {\n    case UserStatus[UserStatus.ACTIVE].toLowerCase():\n      return (\n        <ActiveStatusBox>{intl.formatMessage(messages.active)}</ActiveStatusBox>\n      )\n    case UserStatus[UserStatus.DEACTIVATED].toLowerCase():\n      return (\n        <DeactivatedStatusBox>\n          {intl.formatMessage(messages.deactivated)}\n        </DeactivatedStatusBox>\n      )\n    case UserStatus[UserStatus.DISABLED].toLowerCase():\n      return (\n        <DisabledStatusBox>\n          {intl.formatMessage(messages.disabled)}\n        </DisabledStatusBox>\n      )\n    case UserStatus[UserStatus.PENDING].toLowerCase():\n    default:\n      return (\n        <PendingStatusBox>\n          {intl.formatMessage(messages.pending)}\n        </PendingStatusBox>\n      )\n  }\n}\n\nfunction UserListComponent(props: IProps) {\n  const [showResendSMSSuccess, setShowResendSMSSuccess] = useState(false)\n  const [showUsernameSMSReminderSuccess, setShowUsernameSMSReminderSuccess] =\n    useState(false)\n  const [showResendSMSError, setShowResendSMSError] = useState(false)\n  const [showUsernameSMSReminderError, setShowUsernameSMSReminderError] =\n    useState(false)\n  const [showResetPasswordSMSSuccess, setShowResetPasswordSMSSuccess] =\n    useState(false)\n  const [showResetPasswordSMSError, setResetPasswordSMSError] = useState(false)\n  const {\n    intl,\n    userDetails,\n    goToReviewUserDetails,\n    goToCreateNewUser,\n    goToCreateNewUserWithLocationId,\n    goToTeamSearch,\n    goToUserProfile,\n    offlineOffices,\n    isOnline,\n    offlineCountryConfig,\n    location: { search }\n  } = props\n  const isNatlSysAdmin = userDetails?.systemRole\n    ? NATL_ADMIN_ROLES.includes(userDetails.systemRole)\n      ? true\n      : false\n    : false\n\n  const { locationId } = parse(search) as unknown as ISearchParams\n  const [toggleUsernameReminder, setToggleUsernameReminder] =\n    useState<ToggleModal>({\n      modalVisible: false,\n      selectedUser: null\n    })\n  const [toggleActivation, setToggleActivation] = useState<ToggleModal>({\n    modalVisible: false,\n    selectedUser: null\n  })\n  const [toggleResetPassword, setToggleResetPassword] = useState<ToggleModal>({\n    modalVisible: false,\n    selectedUser: null\n  })\n\n  const [currentPageNumber, setCurrentPageNumber] = useState<number>(1)\n  const recordCount = DEFAULT_FIELD_AGENT_LIST_SIZE * currentPageNumber\n  const searchedLocation: ILocation | undefined = offlineOffices.find(\n    ({ id }) => locationId === id\n  )\n\n  const getAddressName = ({ name, partOf }: ILocation): string => {\n    const parentLocationId = partOf.split('/')[1]\n    if (parentLocationId === '0') return name\n    const parentLocation = offlineCountryConfig.locations[parentLocationId]\n    return `${name}, ${getAddressName(parentLocation)}`\n  }\n\n  const getParentLocation = ({ partOf }: ILocation) => {\n    const parentLocationId = partOf.split('/')[1]\n    return offlineCountryConfig.locations[parentLocationId]\n  }\n\n  const toggleUserActivationModal = useCallback(\n    function toggleUserActivationModal(user?: User) {\n      if (user !== undefined) {\n        setToggleActivation({\n          ...toggleActivation,\n          modalVisible: true,\n          selectedUser: user\n        })\n      } else {\n        setToggleActivation({\n          ...toggleActivation,\n          modalVisible: false\n        })\n      }\n    },\n    [toggleActivation]\n  )\n\n  const toggleUsernameReminderModal = useCallback(\n    function toggleUsernameReminderModal(user?: User) {\n      if (user !== undefined) {\n        setToggleUsernameReminder({\n          ...toggleUsernameReminder,\n          modalVisible: true,\n          selectedUser: user\n        })\n      } else {\n        setToggleUsernameReminder({\n          ...toggleUsernameReminder,\n          modalVisible: false\n        })\n      }\n    },\n    [toggleUsernameReminder]\n  )\n\n  const toggleUserResetPasswordModal = useCallback(\n    function toggleUserResetPasswordModal(user?: User) {\n      if (user !== undefined) {\n        setToggleResetPassword({\n          ...toggleResetPassword,\n          modalVisible: true,\n          selectedUser: user\n        })\n      } else {\n        setToggleResetPassword({\n          ...toggleResetPassword,\n          modalVisible: false\n        })\n      }\n    },\n    [toggleResetPassword]\n  )\n\n  const resendSMS = useCallback(\n    async function resendSMS(userId: string) {\n      try {\n        const res = await userMutations.resendSMSInvite(userId, [\n          {\n            query: SEARCH_USERS,\n            variables: { primaryOfficeId: locationId, count: recordCount }\n          }\n        ])\n        if (res && res.data && res.data.resendSMSInvite) {\n          setShowResendSMSSuccess(true)\n        }\n      } catch (err) {\n        setShowResendSMSError(true)\n      }\n    },\n    [locationId, recordCount]\n  )\n\n  const usernameSMSReminder = useCallback(\n    async function usernameSMSReminder(userId: string) {\n      try {\n        const res = await userMutations.usernameSMSReminderSend(userId, [\n          {\n            query: SEARCH_USERS,\n            variables: { primaryOfficeId: locationId, count: recordCount }\n          }\n        ])\n        if (res && res.data && res.data.usernameSMSReminder) {\n          setShowUsernameSMSReminderSuccess(true)\n        }\n      } catch (err) {\n        setShowUsernameSMSReminderError(true)\n      }\n    },\n    [locationId, recordCount]\n  )\n\n  const resetPassword = useCallback(\n    async function resetPassword(userId: string) {\n      try {\n        const res = await userMutations.sendResetPasswordSMS(\n          userId,\n          offlineCountryConfig.config.APPLICATION_NAME,\n          [\n            {\n              query: SEARCH_USERS,\n              variables: { primaryOfficeId: locationId, count: recordCount }\n            }\n          ]\n        )\n        if (res && res.data && res.data.resetPasswordSMS) {\n          setShowResetPasswordSMSSuccess(true)\n        }\n      } catch (err) {\n        setResetPasswordSMSError(true)\n      }\n    },\n    [recordCount, locationId, offlineCountryConfig.config.APPLICATION_NAME]\n  )\n\n  const getMenuItems = useCallback(\n    function getMenuItems(user: User) {\n      const menuItems = [\n        {\n          label: intl.formatMessage(messages.editUserDetailsTitle),\n          handler: () => {\n            goToReviewUserDetails(user.id as string)\n          }\n        }\n      ]\n\n      if (user.status === 'pending' || user.status === 'active') {\n        menuItems.push(\n          {\n            label: intl.formatMessage(messages.sendUsernameReminderSMS),\n            handler: () => {\n              toggleUsernameReminderModal(user)\n            }\n          },\n          {\n            label: intl.formatMessage(messages.resetUserPasswordTitle),\n            handler: () => {\n              toggleUserResetPasswordModal(user)\n            }\n          }\n        )\n      }\n\n      if (user.status === 'pending') {\n        menuItems.push({\n          label: intl.formatMessage(messages.resendSMS),\n          handler: () => {\n            resendSMS(user.id as string)\n          }\n        })\n      }\n\n      if (user.status === 'active') {\n        menuItems.push({\n          label: intl.formatMessage(messages.deactivate),\n          handler: () => toggleUserActivationModal(user)\n        })\n      }\n\n      if (user.status === 'deactivated') {\n        menuItems.push({\n          label: intl.formatMessage(messages.reactivate),\n          handler: () => toggleUserActivationModal(user)\n        })\n      }\n\n      return menuItems\n    },\n    [\n      goToReviewUserDetails,\n      intl,\n      resendSMS,\n      toggleUserActivationModal,\n      toggleUsernameReminderModal,\n      toggleUserResetPasswordModal\n    ]\n  )\n\n  function getViewOnly(\n    locationId: string,\n    userDetails: UserDetails | null,\n    onlyNational: boolean\n  ) {\n    if (\n      userDetails &&\n      userDetails.systemRole &&\n      userDetails.primaryOffice &&\n      SYS_ADMIN_ROLES.includes(userDetails.systemRole) &&\n      locationId === userDetails.primaryOffice.id &&\n      !onlyNational\n    ) {\n      return false\n    } else if (\n      userDetails &&\n      userDetails.systemRole &&\n      NATL_ADMIN_ROLES.includes(userDetails.systemRole)\n    ) {\n      return false\n    } else {\n      return true\n    }\n  }\n\n  const getUserName = (user: User) => {\n    const userName =\n      (user &&\n        user.name &&\n        ((createNamesMap(user.name as GQLHumanName[])[intl.locale] as string) ||\n          (createNamesMap(user.name as GQLHumanName[])[LANG_EN] as string))) ||\n      ''\n    return userName\n  }\n\n  const StatusMenu = useCallback(\n    function StatusMenu({\n      userDetails,\n      locationId,\n      user,\n      index,\n      status,\n      underInvestigation\n    }: {\n      userDetails: UserDetails | null\n      locationId: string\n      user: User\n      index: number\n      status?: string\n      underInvestigation?: boolean\n    }) {\n      const canEditUserDetails =\n        userDetails?.systemRole === 'NATIONAL_SYSTEM_ADMIN' ||\n        (userDetails?.systemRole === 'LOCAL_SYSTEM_ADMIN' &&\n          userDetails?.primaryOffice?.id === locationId)\n          ? true\n          : false\n      return (\n        // TODO use Pill Component from #2780\n        <StatusMenuContainer>\n          {underInvestigation && <SearchRed />}\n          <Status status={status || 'pending'} />\n          {canEditUserDetails && (\n            <ToggleMenu\n              id={`user-item-${index}-menu`}\n              toggleButton={<VerticalThreeDots />}\n              menuItems={getMenuItems(user)}\n            />\n          )}\n        </StatusMenuContainer>\n      )\n    },\n    [getMenuItems]\n  )\n\n  const generateUserContents = useCallback(\n    function generateUserContents(\n      data: QueryType,\n      locationId: string,\n      userDetails: UserDetails | null\n    ) {\n      if (!data || !data.searchUsers || !data.searchUsers.results) {\n        return []\n      }\n\n      return data.searchUsers.results.map(\n        (user: User | null, index: number) => {\n          if (user !== null) {\n            const name =\n              (user &&\n                user.name &&\n                ((createNamesMap(user.name as GQLHumanName[])[\n                  intl.locale\n                ] as string) ||\n                  (createNamesMap(user.name as GQLHumanName[])[\n                    LANG_EN\n                  ] as string))) ||\n              ''\n            const role = intl.formatMessage({\n              id: getUserRoleIntlKey(user.role._id)\n            })\n            const avatar = user.avatar\n\n            return {\n              image: <AvatarSmall name={name} avatar={avatar || undefined} />,\n              label: (\n                <Link\n                  id=\"profile-link\"\n                  onClick={() => goToUserProfile(String(user.id))}\n                >\n                  {name}\n                </Link>\n              ),\n              value: <Value>{role}</Value>,\n              actions: (\n                <StatusMenu\n                  userDetails={userDetails}\n                  locationId={locationId}\n                  user={user}\n                  index={index}\n                  status={user.status || undefined}\n                  underInvestigation={user.underInvestigation || false}\n                />\n              )\n            }\n          }\n          return {\n            label: '',\n            value: <></>\n          }\n        }\n      )\n    },\n    [StatusMenu, intl, goToUserProfile]\n  )\n\n  const onClickAddUser = useCallback(\n    function onClickAddUser() {\n      ;(searchedLocation &&\n        goToCreateNewUserWithLocationId(searchedLocation.id)) ||\n        goToCreateNewUser()\n    },\n    [goToCreateNewUser, goToCreateNewUserWithLocationId, searchedLocation]\n  )\n\n  function onChangeLocation() {\n    goToTeamSearch(\n      searchedLocation && {\n        selectedLocation: {\n          id: searchedLocation.id,\n          searchableText: searchedLocation.name,\n          displayLabel: searchedLocation.name\n        }\n      }\n    )\n  }\n\n  const LocationButton = (\n    locationId: string,\n    userDetails: UserDetails | null,\n    onlyNational: boolean\n  ) => {\n    const buttons: React.ReactElement[] = []\n    if (!getViewOnly(locationId, userDetails, onlyNational)) {\n      buttons.push(\n        <LocationPicker\n          selectedLocationId={locationId}\n          onChangeLocation={(locationId) => {\n            props.goToTeamUserList(locationId)\n          }}\n          requiredLocationTypes={'CRVS_OFFICE'}\n        />\n      )\n      buttons.push(<AddUserIcon id=\"add-user\" onClick={onClickAddUser} />)\n    }\n    return buttons\n  }\n\n  const RenderUserList = useCallback(\n    function RenderUserList({\n      data,\n      locationId,\n      userDetails\n    }: {\n      data: any\n      locationId: string\n      userDetails: UserDetails | null\n    }) {\n      const totalData =\n        (data && data.searchUsers && data.searchUsers.totalItems) || 0\n      const userContent = generateUserContents(data, locationId, userDetails)\n\n      return (\n        <>\n          <UserTable id=\"user_list\">\n            <ListViewSimplified>\n              {userContent.length <= 0 ? (\n                <NoRecord id=\"no-record\">\n                  {intl.formatMessage(constantsMessages.noResults)}\n                </NoRecord>\n              ) : (\n                userContent.map((content, index) => {\n                  return (\n                    <ListViewItemSimplified\n                      key={index}\n                      image={content.image}\n                      label={content.label}\n                      value={content.value}\n                      actions={content.actions}\n                    />\n                  )\n                })\n              )}\n            </ListViewSimplified>\n            {totalData > DEFAULT_FIELD_AGENT_LIST_SIZE && (\n              <Pagination\n                currentPage={currentPageNumber}\n                totalPages={Math.ceil(\n                  totalData / DEFAULT_FIELD_AGENT_LIST_SIZE\n                )}\n                onPageChange={(currentPage: number) =>\n                  setCurrentPageNumber(currentPage)\n                }\n              />\n            )}\n            <UserAuditActionModal\n              show={toggleActivation.modalVisible}\n              user={toggleActivation.selectedUser}\n              onClose={() => toggleUserActivationModal()}\n              onConfirmRefetchQueries={[\n                {\n                  query: SEARCH_USERS,\n                  variables: {\n                    primaryOfficeId: locationId,\n                    count: recordCount\n                  }\n                }\n              ]}\n            />\n\n            <ResponsiveModal\n              id=\"username-reminder-modal\"\n              show={toggleUsernameReminder.modalVisible}\n              handleClose={() => toggleUsernameReminderModal()}\n              title={intl.formatMessage(\n                messages.sendUsernameReminderSMSModalTitle\n              )}\n              actions={[\n                <Button\n                  type=\"tertiary\"\n                  id=\"username-reminder-cancel\"\n                  key=\"username-reminusernameSMSReminderder-cancel\"\n                  onClick={() => toggleUsernameReminderModal()}\n                >\n                  {intl.formatMessage(buttonMessages.cancel)}\n                </Button>,\n                <Button\n                  type=\"primary\"\n                  id=\"username-reminder-send\"\n                  key=\"username-reminder-send\"\n                  onClick={() => {\n                    if (toggleUsernameReminder.selectedUser?.id) {\n                      usernameSMSReminder(\n                        toggleUsernameReminder.selectedUser.id\n                      )\n                    }\n                    toggleUsernameReminderModal()\n                  }}\n                >\n                  {intl.formatMessage(buttonMessages.send)}\n                </Button>\n              ]}\n              responsive={false}\n              autoHeight={true}\n            >\n              {intl.formatMessage(\n                messages.sendUsernameReminderSMSModalMessage,\n                { phoneNumber: toggleUsernameReminder.selectedUser?.mobile }\n              )}\n            </ResponsiveModal>\n            <ResponsiveModal\n              id=\"user-reset-password-modal\"\n              show={toggleResetPassword.modalVisible}\n              handleClose={() => toggleUserResetPasswordModal()}\n              title={intl.formatMessage(messages.resetUserPasswordModalTitle)}\n              actions={[\n                <Button\n                  type=\"tertiary\"\n                  id=\"reset-password-cancel\"\n                  key=\"reset-password-cancel\"\n                  onClick={() => toggleUserResetPasswordModal()}\n                >\n                  {intl.formatMessage(buttonMessages.cancel)}\n                </Button>,\n                <Button\n                  type=\"primary\"\n                  id=\"reset-password-send\"\n                  key=\"reset-password-send\"\n                  onClick={() => {\n                    if (toggleResetPassword.selectedUser?.id) {\n                      resetPassword(toggleResetPassword.selectedUser.id)\n                    }\n                    toggleUserResetPasswordModal()\n                  }}\n                >\n                  {intl.formatMessage(buttonMessages.send)}\n                </Button>\n              ]}\n              responsive={false}\n              autoHeight={true}\n            >\n              {intl.formatMessage(messages.resetUserPasswordModalMessage, {\n                phoneNumber: toggleResetPassword.selectedUser?.mobile ?? ''\n              })}\n            </ResponsiveModal>\n          </UserTable>\n        </>\n      )\n    },\n    [\n      currentPageNumber,\n      generateUserContents,\n      intl,\n      recordCount,\n      toggleActivation.modalVisible,\n      toggleActivation.selectedUser,\n      toggleUserActivationModal,\n      toggleUsernameReminder.modalVisible,\n      toggleUsernameReminder.selectedUser,\n      toggleUsernameReminderModal,\n      usernameSMSReminder,\n      resetPassword,\n      toggleResetPassword.modalVisible,\n      toggleResetPassword.selectedUser,\n      toggleUserResetPasswordModal\n    ]\n  )\n\n  console.log(userDetails)\n\n  return (\n    <SysAdminContentWrapper\n      changeTeamLocation={\n        (!getViewOnly(locationId, userDetails, true) && onChangeLocation) ||\n        undefined\n      }\n      isCertificatesConfigPage={true}\n      hideBackground={true}\n    >\n      {isOnline ? (\n        <Query\n          query={SEARCH_USERS}\n          variables={{\n            primaryOfficeId: locationId,\n            count: DEFAULT_FIELD_AGENT_LIST_SIZE,\n            skip: (currentPageNumber - 1) * DEFAULT_FIELD_AGENT_LIST_SIZE\n          }}\n          fetchPolicy={'cache-and-network'}\n        >\n          {({ data, loading, error }) => {\n            return (\n              <Content\n                title={\n                  !loading && !error\n                    ? searchedLocation?.name || ''\n                    : intl.formatMessage(headerMessages.teamTitle)\n                }\n                size={ContentSize.LARGE}\n                topActionButtons={LocationButton(\n                  locationId,\n                  userDetails,\n                  isNatlSysAdmin\n                )}\n              >\n                {error ? (\n                  <ErrorText id=\"user_loading_error\">\n                    <>{intl.formatMessage(errorMessages.userQueryError)}</>\n                    <LinkButtonModified\n                      onClick={() => window.location.reload()}\n                    >\n                      {intl.formatMessage(constantsMessages.refresh)}\n                    </LinkButtonModified>\n                  </ErrorText>\n                ) : loading ? (\n                  <Loading>\n                    <LoadingIndicator loading={true} />\n                  </Loading>\n                ) : (\n                  <>\n                    <Header id=\"header\">\n                      {(searchedLocation && searchedLocation.name) || ''}\n                    </Header>\n                    <LocationInfo>\n                      {searchedLocation && (\n                        <LocationInfoValue>\n                          {getAddressName(getParentLocation(searchedLocation))}\n                        </LocationInfoValue>\n                      )}\n                    </LocationInfo>\n                    <RenderUserList\n                      data={data}\n                      locationId={locationId}\n                      userDetails={userDetails}\n                    />\n                  </>\n                )}\n              </Content>\n            )\n          }}\n        </Query>\n      ) : (\n        <Content\n          title={intl.formatMessage(headerMessages.teamTitle)}\n          size={ContentSize.LARGE}\n        >\n          <ConnectivityContainer>\n            <NoConnectivity />\n            <Text id=\"no-connection-text\">\n              {intl.formatMessage(constantsMessages.noConnection)}\n            </Text>\n          </ConnectivityContainer>\n        </Content>\n      )}\n\n      {showResendSMSSuccess && (\n        <Toast\n          id=\"resend_invite_success\"\n          type=\"success\"\n          onClose={() => setShowResendSMSSuccess(false)}\n        >\n          {intl.formatMessage(messages.resendSMSSuccess)}\n        </Toast>\n      )}\n      {showResendSMSError && (\n        <Toast\n          id=\"resend_invite_error\"\n          type=\"warning\"\n          onClose={() => setShowResendSMSError(false)}\n        >\n          {intl.formatMessage(messages.resendSMSError)}\n        </Toast>\n      )}\n\n      {showUsernameSMSReminderSuccess && (\n        <Toast\n          id=\"username_reminder_success\"\n          type=\"success\"\n          onClose={() => setShowUsernameSMSReminderSuccess(false)}\n        >\n          {intl.formatMessage(messages.sendUsernameReminderSMSSuccess, {\n            name: getUserName(toggleUsernameReminder.selectedUser as User)\n          })}\n        </Toast>\n      )}\n      {showUsernameSMSReminderError && (\n        <Toast\n          id=\"username_reminder_error\"\n          type=\"warning\"\n          onClose={() => setShowUsernameSMSReminderError(false)}\n        >\n          {intl.formatMessage(messages.sendUsernameReminderSMSError)}\n        </Toast>\n      )}\n\n      {showResetPasswordSMSSuccess && (\n        <Toast\n          id=\"reset_password_success\"\n          type=\"success\"\n          onClose={() => {\n            setShowResetPasswordSMSSuccess(false)\n            setToggleResetPassword({\n              ...toggleResetPassword,\n              selectedUser: null\n            })\n          }}\n        >\n          {intl.formatMessage(messages.resetPasswordSMSSuccess, {\n            username: getUserName(toggleResetPassword.selectedUser as User)\n          })}\n        </Toast>\n      )}\n      {showResetPasswordSMSError && (\n        <Toast\n          id=\"reset_password_error\"\n          type=\"warning\"\n          onClose={() => setResetPasswordSMSError(false)}\n        >\n          {intl.formatMessage(messages.resetPasswordSMSError)}\n        </Toast>\n      )}\n    </SysAdminContentWrapper>\n  )\n}\n\nexport const UserList = connect(\n  (state: IStoreState) => ({\n    offlineOffices: Object.values(getOfflineData(state).offices),\n    userDetails: getUserDetails(state),\n    offlineCountryConfig: getOfflineData(state)\n  }),\n  {\n    goToCreateNewUser,\n    goToCreateNewUserWithLocationId,\n    goToReviewUserDetails,\n    goToTeamSearch,\n    goToUserProfile,\n    goToTeamUserList\n  }\n)(withTheme(injectIntl(withOnlineStatus(UserListComponent))))\n"
        }
    ]
}