{
    "sourceFile": "packages/client/src/views/Organisation/AdministrativeLevels.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1677161517065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1677161718354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,9 @@\n   //\n   const getNewLevel =\n     (currentlySelectedLocation: string) =>\n     (store: IStoreState): IGetNewLevel => {\n+      console.log(store)\n       const location = currentlySelectedLocation ?? '0'\n       const locations = store.offline.offlineData.locations as {\n         [key: string]: ILocation\n       }\n"
                },
                {
                    "date": 1677161784648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n  * Copyright (C) The OpenCRVS Authors. OpenCRVS and the OpenCRVS\n  * graphic logo are (registered/a) trademark(s) of Plan International.\n  */\n import React, { Fragment } from 'react'\n+import { Header } from '@client/components/Header/Header'\n import { navigationMessages } from '@client/i18n/messages/views/navigation'\n import { constantsMessages } from '@client/i18n/messages'\n import { Navigation } from '@client/components/interface/Navigation'\n import { useIntl } from 'react-intl'\n@@ -23,10 +24,9 @@\n   BreadCrumb,\n   Divider,\n   Icon,\n   Button,\n-  Pagination,\n-  Header\n+  Pagination\n } from '@opencrvs/components/lib'\n import { IBreadCrumbData } from '@opencrvs/components/src/Breadcrumb'\n import { useDispatch, useSelector } from 'react-redux'\n import { IStoreState } from '@client/store'\n"
                },
                {
                    "date": 1677161969975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,8 @@\n   //\n   const getNewLevel =\n     (currentlySelectedLocation: string) =>\n     (store: IStoreState): IGetNewLevel => {\n-      console.log(store)\n       const location = currentlySelectedLocation ?? '0'\n       const locations = store.offline.offlineData.locations as {\n         [key: string]: ILocation\n       }\n"
                }
            ],
            "date": 1677161517065,
            "name": "Commit-0",
            "content": "/*\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n *\n * OpenCRVS is also distributed under the terms of the Civil Registration\n * & Healthcare Disclaimer located at http://opencrvs.org/license.\n *\n * Copyright (C) The OpenCRVS Authors. OpenCRVS and the OpenCRVS\n * graphic logo are (registered/a) trademark(s) of Plan International.\n */\nimport React, { Fragment } from 'react'\nimport { navigationMessages } from '@client/i18n/messages/views/navigation'\nimport { constantsMessages } from '@client/i18n/messages'\nimport { Navigation } from '@client/components/interface/Navigation'\nimport { useIntl } from 'react-intl'\nimport {\n  Frame,\n  Content,\n  Link,\n  ListViewItemSimplified,\n  ListViewSimplified,\n  BreadCrumb,\n  Divider,\n  Icon,\n  Button,\n  Pagination,\n  Header\n} from '@opencrvs/components/lib'\nimport { IBreadCrumbData } from '@opencrvs/components/src/Breadcrumb'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { IStoreState } from '@client/store'\nimport { ILocation, LocationType } from '@client/offline/reducer'\nimport { useParams } from 'react-router'\nimport {\n  goToOrganizationList,\n  goToPerformanceHome,\n  goToTeamUserList\n} from '@client/navigation'\nimport startOfMonth from 'date-fns/startOfMonth'\nimport subMonths from 'date-fns/subMonths'\nimport styled from 'styled-components'\n\nconst DEFAULT_PAGINATION_LIST_SIZE = 10\n\ntype IRouteProps = {\n  locationId: string\n}\n\ntype IGetNewLevel = {\n  childLocations: ILocation[]\n  breadCrumb: IBreadCrumbData[]\n}\n\nconst NoRecord = styled.div<{ isFullPage?: boolean }>`\n  ${({ theme }) => theme.fonts.h3};\n  text-align: left;\n  margin-left: ${({ isFullPage }) => (isFullPage ? `40px` : `10px`)};\n  color: ${({ theme }) => theme.colors.copy};\n  margin-top: 20px;\n`\n\n// const con\n\nexport function AdministrativeLevels() {\n  const intl = useIntl()\n  const { locationId } = useParams<IRouteProps>()\n  const dispatch = useDispatch()\n  //\n  const getNewLevel =\n    (currentlySelectedLocation: string) =>\n    (store: IStoreState): IGetNewLevel => {\n      const location = currentlySelectedLocation ?? '0'\n      const locations = store.offline.offlineData.locations as {\n        [key: string]: ILocation\n      }\n      const offices = store.offline.offlineData.offices as {\n        [key: string]: ILocation\n      }\n\n      let childLocations = Object.values(locations).filter(\n        (s) => s.partOf === `Location/${location}`\n      )\n\n      if (!childLocations.length) {\n        childLocations = Object.values(offices).filter(\n          (s) => s.partOf === `Location/${location}`\n        )\n      }\n\n      let dataOfBreadCrumb: IBreadCrumbData[] = [\n        {\n          label: intl.formatMessage(constantsMessages.countryName),\n          paramId: ''\n        }\n      ]\n\n      if (currentlySelectedLocation) {\n        let currentLocationId = currentlySelectedLocation\n        const LocationBreadCrumb: IBreadCrumbData[] | null = []\n        do {\n          const currentOffice = locations[currentLocationId]\n\n          if (currentOffice) {\n            LocationBreadCrumb.push({\n              label: currentOffice.name,\n              paramId: currentOffice.id\n            })\n            currentLocationId = currentOffice.partOf.split('/')[1]\n          } else {\n            currentLocationId = ''\n          }\n        } while (currentLocationId !== '')\n\n        dataOfBreadCrumb = [\n          ...dataOfBreadCrumb,\n          ...LocationBreadCrumb.reverse()\n        ]\n      }\n\n      return {\n        breadCrumb: dataOfBreadCrumb,\n        childLocations\n      }\n    }\n\n  const dataLocations = useSelector<IStoreState, IGetNewLevel>(\n    getNewLevel(locationId)\n  )\n  const totalNumber = dataLocations.childLocations.length\n  const [currentPageNumber, setCurrentPageNumber] = React.useState<number>(1)\n\n  const changeLevelAction = (\n    e: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement, MouseEvent>,\n    id: string\n  ) => {\n    e.preventDefault()\n    dispatch(goToOrganizationList(id))\n  }\n\n  const onClickBreadCrumb = (crumb: IBreadCrumbData) => {\n    setCurrentPageNumber(1)\n    dispatch(goToOrganizationList(crumb.paramId))\n  }\n\n  //\n  return (\n    <Frame\n      header={\n        <Header title={intl.formatMessage(navigationMessages.organisation)} />\n      }\n      skipToContentText={intl.formatMessage(\n        constantsMessages.skipToMainContent\n      )}\n      navigation={<Navigation />}\n    >\n      <Content\n        title={intl.formatMessage(navigationMessages.organisation)}\n        showTitleOnMobile={false}\n      >\n        <Fragment key={'.0'}>\n          <BreadCrumb\n            items={dataLocations.breadCrumb}\n            onSelect={onClickBreadCrumb}\n          />\n          <Divider />\n          <ListViewSimplified bottomBorder rowHeight={'small'}>\n            {dataLocations.childLocations.length > 0 ? (\n              dataLocations.childLocations\n                ?.slice(\n                  (currentPageNumber - 1) * DEFAULT_PAGINATION_LIST_SIZE,\n                  currentPageNumber * DEFAULT_PAGINATION_LIST_SIZE\n                )\n                .map((level: ILocation, index: number) => (\n                  <ListViewItemSimplified\n                    key={index}\n                    label={\n                      <Link\n                        element=\"a\"\n                        onClick={(e) => {\n                          if (level.type === LocationType.ADMIN_STRUCTURE) {\n                            setCurrentPageNumber(1)\n                            changeLevelAction(e, level.id)\n                          }\n                          if (level.type === LocationType.CRVS_OFFICE)\n                            dispatch(goToTeamUserList(level.id))\n                        }}\n                      >\n                        {level?.name}\n                      </Link>\n                    }\n                    actions={\n                      <Button\n                        type=\"icon\"\n                        size=\"small\"\n                        onClick={() => {\n                          dispatch(\n                            goToPerformanceHome(\n                              startOfMonth(subMonths(new Date(Date.now()), 11)),\n                              new Date(Date.now()),\n                              undefined,\n                              level.id\n                            )\n                          )\n                        }}\n                      >\n                        <Icon\n                          name=\"Activity\"\n                          color=\"currentColor\"\n                          size=\"medium\"\n                        />\n                      </Button>\n                    }\n                  />\n                ))\n            ) : (\n              <NoRecord id=\"no-record\">\n                {intl.formatMessage(constantsMessages.noResults)}\n              </NoRecord>\n            )}\n          </ListViewSimplified>\n        </Fragment>\n        {totalNumber > DEFAULT_PAGINATION_LIST_SIZE && (\n          <Pagination\n            currentPage={currentPageNumber}\n            totalPages={Math.ceil(totalNumber / DEFAULT_PAGINATION_LIST_SIZE)}\n            onPageChange={(currentPage: number) =>\n              setCurrentPageNumber(currentPage)\n            }\n          />\n        )}\n      </Content>\n    </Frame>\n  )\n}\n"
        }
    ]
}