{
    "sourceFile": "packages/client/src/views/UserAudit/UserAudit.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1677165088113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1677165338039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,9 +296,9 @@\n         <Content\n           title={user.name}\n           icon={() => <UserAvatar name={user.name} avatar={user.avatar} />}\n           topActionButtons={\n-            userDetails.systemRole === SystemRoleType.LocalSystemAdmin\n+            userDetails.systemRole === SystemRoleType.LocalSystemAdmin && userDetails?.primaryOffice?.id !== user.primaryOffice.id\n               ? [<Status status={user.status || 'pending'} />]\n               : [\n                   <Status status={user.status || 'pending'} />,\n                   <ToggleMenu\n"
                },
                {
                    "date": 1677165350948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,9 +296,10 @@\n         <Content\n           title={user.name}\n           icon={() => <UserAvatar name={user.name} avatar={user.avatar} />}\n           topActionButtons={\n-            userDetails.systemRole === SystemRoleType.LocalSystemAdmin && userDetails?.primaryOffice?.id !== user.primaryOffice.id\n+            userDetails.systemRole === SystemRoleType.LocalSystemAdmin &&\n+            userDetails?.primaryOffice?.id !== user.primaryOffice.id\n               ? [<Status status={user.status || 'pending'} />]\n               : [\n                   <Status status={user.status || 'pending'} />,\n                   <ToggleMenu\n"
                },
                {
                    "date": 1677165478028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,8 +256,11 @@\n     }\n     return menuItems\n   }\n \n+  console.log(userDetails.systemRole, SystemRoleType.LocalSystemAdmin,\n+    userDetails?.primaryOffice?.id,  user.primaryOffice.id)\n+\n   return (\n     <Frame\n       header={\n         <AppBar\n"
                },
                {
                    "date": 1677165593957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,9 +304,9 @@\n           title={user.name}\n           icon={() => <UserAvatar name={user.name} avatar={user.avatar} />}\n           topActionButtons={\n             userDetails.systemRole === SystemRoleType.LocalSystemAdmin &&\n-            userDetails?.primaryOffice?.id !== user.primaryOffice.id\n+            userDetails?.primaryOffice?.id !== user?.primaryOffice.id\n               ? [<Status status={user.status || 'pending'} />]\n               : [\n                   <Status status={user.status || 'pending'} />,\n                   <ToggleMenu\n"
                },
                {
                    "date": 1677165599729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,10 +256,14 @@\n     }\n     return menuItems\n   }\n \n-  console.log(userDetails.systemRole, SystemRoleType.LocalSystemAdmin,\n-    userDetails?.primaryOffice?.id,  user.primaryOffice.id)\n+  console.log(\n+    userDetails.systemRole,\n+    SystemRoleType.LocalSystemAdmin,\n+    userDetails?.primaryOffice?.id,\n+    user.primaryOffice.id\n+  )\n \n   return (\n     <Frame\n       header={\n@@ -300,9 +304,9 @@\n           title={user.name}\n           icon={() => <UserAvatar name={user.name} avatar={user.avatar} />}\n           topActionButtons={\n             userDetails.systemRole === SystemRoleType.LocalSystemAdmin &&\n-            userDetails?.primaryOffice?.id !== user?.primaryOffice.id\n+            userDetails?.primaryOffice?.id !== user?.primaryOffice?.id\n               ? [<Status status={user.status || 'pending'} />]\n               : [\n                   <Status status={user.status || 'pending'} />,\n                   <ToggleMenu\n"
                },
                {
                    "date": 1677165612378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,10 +303,9 @@\n         <Content\n           title={user.name}\n           icon={() => <UserAvatar name={user.name} avatar={user.avatar} />}\n           topActionButtons={\n-            userDetails.systemRole === SystemRoleType.LocalSystemAdmin &&\n-            userDetails?.primaryOffice?.id !== user?.primaryOffice?.id\n+            userDetails.systemRole === SystemRoleType.LocalSystemAdmin\n               ? [<Status status={user.status || 'pending'} />]\n               : [\n                   <Status status={user.status || 'pending'} />,\n                   <ToggleMenu\n"
                },
                {
                    "date": 1677165631589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,9 +260,9 @@\n   console.log(\n     userDetails.systemRole,\n     SystemRoleType.LocalSystemAdmin,\n     userDetails?.primaryOffice?.id,\n-    user.primaryOffice.id\n+    user?.primaryOffice?.id\n   )\n \n   return (\n     <Frame\n"
                },
                {
                    "date": 1677165666768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,10 @@\n         <Content\n           title={user.name}\n           icon={() => <UserAvatar name={user.name} avatar={user.avatar} />}\n           topActionButtons={\n-            userDetails.systemRole === SystemRoleType.LocalSystemAdmin\n+            userDetails.systemRole === SystemRoleType.LocalSystemAdmin &&\n+            userDetails?.primaryOffice?.id !== user?.primaryOffice?.id\n               ? [<Status status={user.status || 'pending'} />]\n               : [\n                   <Status status={user.status || 'pending'} />,\n                   <ToggleMenu\n"
                },
                {
                    "date": 1677165677827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,15 +256,8 @@\n     }\n     return menuItems\n   }\n \n-  console.log(\n-    userDetails.systemRole,\n-    SystemRoleType.LocalSystemAdmin,\n-    userDetails?.primaryOffice?.id,\n-    user?.primaryOffice?.id\n-  )\n-\n   return (\n     <Frame\n       header={\n         <AppBar\n"
                },
                {
                    "date": 1677170308749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,9 +296,9 @@\n         <Content\n           title={user.name}\n           icon={() => <UserAvatar name={user.name} avatar={user.avatar} />}\n           topActionButtons={\n-            userDetails.systemRole === SystemRoleType.LocalSystemAdmin &&\n+            userDetails?.systemRole === SystemRoleType.LocalSystemAdmin &&\n             userDetails?.primaryOffice?.id !== user?.primaryOffice?.id\n               ? [<Status status={user.status || 'pending'} />]\n               : [\n                   <Status status={user.status || 'pending'} />,\n"
                },
                {
                    "date": 1677501685988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,10 +44,9 @@\n import {\n   GetUserQuery,\n   GetUserQueryVariables,\n   HumanName,\n-  User,\n-  SystemRoleType\n+  User\n } from '@client/utils/gateway'\n import { GenericErrorToast } from '@client/components/GenericErrorToast'\n import { ResponsiveModal } from '@opencrvs/components/lib/ResponsiveModal'\n import { getOfflineData } from '@client/offline/selectors'\n@@ -296,10 +295,9 @@\n         <Content\n           title={user.name}\n           icon={() => <UserAvatar name={user.name} avatar={user.avatar} />}\n           topActionButtons={\n-            userDetails?.systemRole === SystemRoleType.LocalSystemAdmin &&\n-            userDetails?.primaryOffice?.id !== user?.primaryOffice?.id\n+            user.systemRole === SystemRoleType.LocalSystemAdmin\n               ? [<Status status={user.status || 'pending'} />]\n               : [\n                   <Status status={user.status || 'pending'} />,\n                   <ToggleMenu\n"
                },
                {
                    "date": 1677501744120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -295,9 +295,10 @@\n         <Content\n           title={user.name}\n           icon={() => <UserAvatar name={user.name} avatar={user.avatar} />}\n           topActionButtons={\n-            user.systemRole === SystemRoleType.LocalSystemAdmin\n+            userDetails.systemRole === SystemRoleType.LocalSystemAdmin &&\n+            userDetails?.primaryOffice?.id !== user?.primaryOffice?.id\n               ? [<Status status={user.status || 'pending'} />]\n               : [\n                   <Status status={user.status || 'pending'} />,\n                   <ToggleMenu\n"
                }
            ],
            "date": 1677165088113,
            "name": "Commit-0",
            "content": "/*\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n *\n * OpenCRVS is also distributed under the terms of the Civil Registration\n * & Healthcare Disclaimer located at http://opencrvs.org/license.\n *\n * Copyright (C) The OpenCRVS Authors. OpenCRVS and the OpenCRVS\n * graphic logo are (registered/a) trademark(s) of Plan International.\n */\n\nimport React, { useState } from 'react'\nimport { messages as userFormMessages } from '@client/i18n/messages/views/userForm'\nimport { constantsMessages, buttonMessages } from '@client/i18n/messages'\nimport { messages as sysMessages } from '@client/i18n/messages/views/sysAdmin'\nimport { Navigation } from '@client/components/interface/Navigation'\nimport { Frame } from '@opencrvs/components/lib/Frame'\nimport { IntlShape, useIntl } from 'react-intl'\nimport { useParams } from 'react-router'\nimport { GET_USER } from '@client/user/queries'\nimport { createNamesMap } from '@client/utils/data-formatting'\nimport { AvatarSmall } from '@client/components/Avatar'\nimport styled from 'styled-components'\nimport { ToggleMenu } from '@opencrvs/components/lib/ToggleMenu'\nimport { Button } from '@opencrvs/components/lib/Button'\nimport { getUserRoleIntlKey } from '@client/views/SysAdmin//Team/utils'\nimport { EMPTY_STRING, LANG_EN } from '@client/utils/constants'\nimport { Loader } from '@opencrvs/components/lib/Loader'\nimport { getJurisdictionLocationIdFromUserDetails } from '@client/views/SysAdmin/Performance/utils'\nimport { messages as userSetupMessages } from '@client/i18n/messages/views/userSetup'\nimport { Content, ContentSize } from '@opencrvs/components/lib/Content'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { goToReviewUserDetails, goToTeamUserList } from '@client/navigation'\nimport { Status } from '@client/views/SysAdmin/Team/user/UserList'\nimport { VerticalThreeDots } from '@client/../../components/lib/icons'\nimport { IStoreState } from '@client/store'\nimport { getScope, getUserDetails } from '@client/profile/profileSelectors'\nimport { userMutations } from '@client/user/mutations'\nimport { UserAuditHistory } from '@client/views/UserAudit/UserAuditHistory'\nimport { Summary } from '@opencrvs/components/lib/Summary'\nimport { Toast } from '@opencrvs/components/lib/Toast'\nimport { UserAuditActionModal } from '@client/views/SysAdmin/Team/user/UserAuditActionModal'\nimport {\n  GetUserQuery,\n  GetUserQueryVariables,\n  HumanName,\n  User,\n  SystemRoleType\n} from '@client/utils/gateway'\nimport { GenericErrorToast } from '@client/components/GenericErrorToast'\nimport { ResponsiveModal } from '@opencrvs/components/lib/ResponsiveModal'\nimport { getOfflineData } from '@client/offline/selectors'\nimport { useQuery } from '@apollo/client'\nimport { AppBar, Link } from '@opencrvs/components/lib'\nimport { ProfileMenu } from '@client/components/ProfileMenu'\nimport { HistoryNavigator } from '@client/components/Header/HistoryNavigator'\nimport { UserDetails } from '@client/utils/userUtils'\n\nconst UserAvatar = styled(AvatarSmall)`\n  @media (max-width: ${({ theme }) => theme.grid.breakpoints.md}px) {\n    display: none;\n  }\n`\n\nexport const InformationTitle = styled.div`\n  ${({ theme }) => theme.fonts.bold16};\n  width: 320px;\n`\n\ninterface IRouteProps {\n  userId: string\n}\n\nconst transformUserQueryResult = (\n  userData: NonNullable<GetUserQuery['getUser']>,\n  intl: IntlShape\n) => {\n  const locale = intl.locale\n  return {\n    id: userData.id,\n    primaryOffice: {\n      id: (userData.primaryOffice && userData.primaryOffice.id) || '',\n      searchableText: '',\n      displayLabel:\n        (userData.primaryOffice &&\n          (locale === LANG_EN\n            ? userData.primaryOffice.name\n            : (userData.primaryOffice.alias &&\n                userData.primaryOffice.alias.join(' ')) ||\n              '')) ||\n        ''\n    },\n    name:\n      createNamesMap(userData.name as HumanName[])[locale] ||\n      createNamesMap(userData.name as HumanName[])[LANG_EN],\n    systemRole: userData.systemRole,\n    role: userData.role,\n    number: userData.mobile,\n    status: userData.status,\n    underInvestigation: userData.underInvestigation,\n    username: userData.username,\n    nid:\n      userData.identifier?.system === 'NATIONAL_ID'\n        ? userData.identifier.value\n        : EMPTY_STRING,\n    practitionerId: userData.practitionerId,\n    locationId:\n      getJurisdictionLocationIdFromUserDetails(userData as UserDetails) || '0',\n    avatar: userData.avatar || undefined,\n    device: userData.device\n  }\n}\n\nexport const UserAudit = () => {\n  const intl = useIntl()\n  const { userId } = useParams<IRouteProps>()\n  const dispatch = useDispatch()\n  const [showResendSMSSuccess, setShowResendSMSSuccess] =\n    useState<boolean>(false)\n  const [showResendSMSError, setShowResendSMSError] = useState<boolean>(false)\n  const [modalVisible, setModalVisible] = useState(false)\n  const scope = useSelector((store: IStoreState) => getScope(store))\n  const userDetails = useSelector((store: IStoreState) => getUserDetails(store))\n  const [showUsernameSMSReminderSuccess, setShowUsernameSMSReminderSuccess] =\n    useState(false)\n  const [showUsernameSMSReminderError, setShowUsernameSMSReminderError] =\n    useState(false)\n  const [showResetPasswordSMSSuccess, setShowResetPasswordSMSSuccess] =\n    useState(false)\n  const [showResetPasswordSMSError, setShowResetPasswordSMSError] =\n    useState(false)\n  const [toggleUsernameReminder, setToggleUsernameReminder] = useState(false)\n  const [toggleResetPassword, setToggleResetPassword] = useState(false)\n  const offLineData = useSelector(getOfflineData)\n  const { data, loading, error } = useQuery<\n    GetUserQuery,\n    GetUserQueryVariables\n  >(GET_USER, { variables: { userId }, fetchPolicy: 'cache-and-network' })\n  const user = data?.getUser && transformUserQueryResult(data.getUser, intl)\n  const userRole =\n    user && intl.formatMessage({ id: getUserRoleIntlKey(user.role._id) })\n\n  const toggleUserActivationModal = () => {\n    setModalVisible(!modalVisible)\n  }\n\n  const toggleUsernameReminderModal = () => {\n    setToggleUsernameReminder((prevValue) => !prevValue)\n  }\n\n  const toggleUserResetPasswordModal = () => {\n    setToggleResetPassword((prevValue) => !prevValue)\n  }\n\n  const resendSMS = async (userId: string) => {\n    try {\n      const res = await userMutations.resendSMSInvite(userId, [\n        {\n          query: GET_USER,\n          variables: {\n            userId: userId\n          }\n        }\n      ])\n      if (res && res.data && res.data.resendSMSInvite) {\n        setShowResendSMSSuccess(true)\n      }\n    } catch (err) {\n      setShowResendSMSError(true)\n    }\n  }\n\n  const usernameSMSReminder = async (userId: string) => {\n    try {\n      const res = await userMutations.usernameSMSReminderSend(userId, [\n        {\n          query: GET_USER,\n          variables: { userId: userId }\n        }\n      ])\n      if (res && res.data && res.data.usernameSMSReminder) {\n        setShowUsernameSMSReminderSuccess(true)\n      }\n    } catch (err) {\n      setShowUsernameSMSReminderError(true)\n    }\n  }\n\n  const resetPassword = async (userId: string) => {\n    try {\n      const res = await userMutations.sendResetPasswordSMS(\n        userId,\n        offLineData.config.APPLICATION_NAME,\n        [\n          {\n            query: GET_USER,\n            variables: { userId: userId }\n          }\n        ]\n      )\n      if (res && res.data && res.data.resetPasswordSMS) {\n        setShowResetPasswordSMSSuccess(true)\n      }\n    } catch (err) {\n      setShowResetPasswordSMSError(true)\n    }\n  }\n\n  const getMenuItems = (userId: string, status: string) => {\n    const menuItems: { label: string; handler: () => void }[] = [\n      {\n        label: intl.formatMessage(sysMessages.editUserDetailsTitle),\n        handler: () => dispatch(goToReviewUserDetails(userId))\n      }\n    ]\n\n    if (status === 'pending' || status === 'active') {\n      menuItems.push(\n        {\n          label: intl.formatMessage(sysMessages.sendUsernameReminderSMS),\n          handler: () => {\n            toggleUsernameReminderModal()\n          }\n        },\n        {\n          label: intl.formatMessage(sysMessages.resetUserPasswordTitle),\n          handler: () => {\n            toggleUserResetPasswordModal()\n          }\n        }\n      )\n    }\n\n    if (status === 'active') {\n      menuItems.push({\n        label: intl.formatMessage(sysMessages.deactivate),\n        handler: () => toggleUserActivationModal()\n      })\n    }\n\n    if (status === 'deactivated') {\n      menuItems.push({\n        label: intl.formatMessage(sysMessages.reactivate),\n        handler: () => toggleUserActivationModal()\n      })\n    }\n\n    if (status === 'pending') {\n      menuItems.push({\n        label: intl.formatMessage(sysMessages.resendSMS),\n        handler: () => {\n          resendSMS(userId)\n        }\n      })\n    }\n    return menuItems\n  }\n\n  return (\n    <Frame\n      header={\n        <AppBar\n          mobileTitle={user?.name}\n          desktopLeft={<HistoryNavigator />}\n          desktopRight={<ProfileMenu key=\"profileMenu\" />}\n          mobileLeft={<HistoryNavigator hideForward />}\n          mobileRight={\n            user && (\n              <>\n                <Status status={user.status || 'pending'} />\n                <ToggleMenu\n                  id={`sub-page-header-munu-button`}\n                  toggleButton={<VerticalThreeDots />}\n                  menuItems={getMenuItems(\n                    user.id as string,\n                    user.status as string\n                  )}\n                  hide={(scope && !scope.includes('sysadmin')) || false}\n                />\n              </>\n            )\n          }\n        />\n      }\n      skipToContentText={intl.formatMessage(\n        constantsMessages.skipToMainContent\n      )}\n      navigation={<Navigation />}\n    >\n      {loading ? (\n        <Loader id=\"user_loader\" marginPercent={35} />\n      ) : error || !user ? (\n        <GenericErrorToast />\n      ) : (\n        <Content\n          title={user.name}\n          icon={() => <UserAvatar name={user.name} avatar={user.avatar} />}\n          topActionButtons={\n            userDetails.systemRole === SystemRoleType.LocalSystemAdmin\n              ? [<Status status={user.status || 'pending'} />]\n              : [\n                  <Status status={user.status || 'pending'} />,\n                  <ToggleMenu\n                    id={`sub-page-header-munu-button`}\n                    toggleButton={<VerticalThreeDots />}\n                    menuItems={getMenuItems(\n                      user.id as string,\n                      user.status as string\n                    )}\n                    hide={(scope && !scope.includes('sysadmin')) || false}\n                  />\n                ]\n          }\n          size={ContentSize.LARGE}\n        >\n          <>\n            <Summary>\n              <Summary.Row\n                data-testid=\"office-link\"\n                label={intl.formatMessage(userSetupMessages.assignedOffice)}\n                value={\n                  <Link\n                    id=\"office-link\"\n                    onClick={() =>\n                      dispatch(goToTeamUserList(user.primaryOffice!.id))\n                    }\n                  >\n                    {user.primaryOffice && user.primaryOffice.displayLabel}\n                  </Link>\n                }\n              />\n              <Summary.Row\n                label={intl.formatMessage(userFormMessages.labelRole)}\n                value={userRole}\n              />\n              <Summary.Row\n                label={intl.formatMessage(userFormMessages.userDevice)}\n                value={user.device === null ? 'N/A' : user.device}\n              />\n            </Summary>\n\n            {user.practitionerId && (\n              <UserAuditHistory\n                practitionerId={user.practitionerId}\n                practitionerName={user.name}\n                loggedInUserRole={userDetails!.systemRole}\n              />\n            )}\n          </>\n          <UserAuditActionModal\n            show={modalVisible}\n            user={data.getUser! as User}\n            onClose={() => toggleUserActivationModal()}\n            onConfirmRefetchQueries={[\n              {\n                query: GET_USER,\n                variables: {\n                  userId: userId\n                }\n              }\n            ]}\n          />\n          <ResponsiveModal\n            id=\"username-reminder-modal\"\n            show={toggleUsernameReminder}\n            handleClose={() => toggleUsernameReminderModal()}\n            title={intl.formatMessage(\n              sysMessages.sendUsernameReminderSMSModalTitle\n            )}\n            actions={[\n              <Button\n                type=\"tertiary\"\n                id=\"username-reminder-cancel\"\n                key=\"username-reminusernameSMSReminderder-cancel\"\n                onClick={() => toggleUsernameReminderModal()}\n              >\n                {intl.formatMessage(buttonMessages.cancel)}\n              </Button>,\n              <Button\n                type=\"primary\"\n                id=\"username-reminder-send\"\n                key=\"username-reminder-send\"\n                onClick={() => {\n                  if (toggleUsernameReminder) {\n                    usernameSMSReminder(userId)\n                  }\n                  toggleUsernameReminderModal()\n                }}\n              >\n                {intl.formatMessage(buttonMessages.send)}\n              </Button>\n            ]}\n            responsive={false}\n            autoHeight={true}\n          >\n            {intl.formatMessage(\n              sysMessages.sendUsernameReminderSMSModalMessage,\n              { phoneNumber: user.number }\n            )}\n          </ResponsiveModal>\n          <ResponsiveModal\n            id=\"user-reset-password-modal\"\n            show={toggleResetPassword}\n            handleClose={() => toggleUserResetPasswordModal()}\n            title={intl.formatMessage(sysMessages.resetUserPasswordModalTitle)}\n            actions={[\n              <Button\n                type=\"tertiary\"\n                id=\"reset-password-cancel\"\n                key=\"reset-password-cancel\"\n                onClick={() => toggleUserResetPasswordModal()}\n              >\n                {intl.formatMessage(buttonMessages.cancel)}\n              </Button>,\n              <Button\n                type=\"primary\"\n                id=\"reset-password-send\"\n                key=\"reset-password-send\"\n                onClick={() => {\n                  if (toggleResetPassword) {\n                    resetPassword(userId)\n                  }\n                  toggleUserResetPasswordModal()\n                }}\n              >\n                {intl.formatMessage(buttonMessages.send)}\n              </Button>\n            ]}\n            responsive={false}\n            autoHeight={true}\n          >\n            {intl.formatMessage(sysMessages.resetUserPasswordModalMessage, {\n              phoneNumber: user.number ?? ''\n            })}\n          </ResponsiveModal>\n          {showResendSMSSuccess && (\n            <Toast\n              id=\"resend_invite_success\"\n              type=\"success\"\n              onClose={() => setShowResendSMSSuccess(false)}\n            >\n              {intl.formatMessage(sysMessages.resendSMSSuccess)}\n            </Toast>\n          )}\n          {showResendSMSError && (\n            <Toast\n              id=\"resend_invite_error\"\n              type=\"error\"\n              onClose={() => setShowResendSMSError(false)}\n            >\n              {intl.formatMessage(sysMessages.resendSMSError)}\n            </Toast>\n          )}\n          {showUsernameSMSReminderSuccess && (\n            <Toast\n              id=\"username_reminder_success\"\n              type=\"success\"\n              onClose={() => setShowUsernameSMSReminderSuccess(false)}\n            >\n              {intl.formatMessage(sysMessages.sendUsernameReminderSMSSuccess, {\n                name: user.name\n              })}\n            </Toast>\n          )}\n          {showUsernameSMSReminderError && (\n            <Toast\n              id=\"username_reminder_error\"\n              type=\"warning\"\n              onClose={() => setShowUsernameSMSReminderError(false)}\n            >\n              {intl.formatMessage(sysMessages.sendUsernameReminderSMSError)}\n            </Toast>\n          )}\n\n          {showResetPasswordSMSSuccess && (\n            <Toast\n              id=\"reset_password_success\"\n              type=\"success\"\n              onClose={() => {\n                setShowResetPasswordSMSSuccess(false)\n              }}\n            >\n              {intl.formatMessage(sysMessages.resetPasswordSMSSuccess, {\n                username: user.name\n              })}\n            </Toast>\n          )}\n          {showResetPasswordSMSError && (\n            <Toast\n              id=\"reset_password_error\"\n              type=\"warning\"\n              onClose={() => setShowResetPasswordSMSError(false)}\n            >\n              {intl.formatMessage(sysMessages.resetPasswordSMSError)}\n            </Toast>\n          )}\n        </Content>\n      )}\n    </Frame>\n  )\n}\n"
        }
    ]
}