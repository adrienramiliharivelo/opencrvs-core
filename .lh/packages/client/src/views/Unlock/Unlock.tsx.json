{
    "sourceFile": "packages/client/src/views/Unlock/Unlock.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1677231545480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1677231545480,
            "name": "Commit-0",
            "content": "/*\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n *\n * OpenCRVS is also distributed under the terms of the Civil Registration\n * & Healthcare Disclaimer located at http://opencrvs.org/license.\n *\n * Copyright (C) The OpenCRVS Authors. OpenCRVS and the OpenCRVS\n * graphic logo are (registered/a) trademark(s) of Plan International.\n */\nimport React from 'react'\nimport styled from 'styled-components'\nimport { SCREEN_LOCK } from '@client/components/ProtectedPage'\nimport { messages } from '@client/i18n/messages/views/pin'\nimport { redirectToAuthentication } from '@client/profile/profileActions'\nimport { getUserDetails } from '@client/profile/profileSelectors'\nimport { storage } from '@client/storage'\nimport { IStoreState } from '@client/store'\nimport { SECURITY_PIN_EXPIRED_AT } from '@client/utils/constants'\nimport { getUserName, UserDetails } from '@client/utils/userUtils'\nimport { pinValidator } from '@client/views/Unlock/ComparePINs'\nimport { PINKeypad } from '@opencrvs/components/lib/PINKeypad'\nimport {\n  injectIntl,\n  useIntl,\n  WrappedComponentProps as IntlShapeProps\n} from 'react-intl'\nimport { connect } from 'react-redux'\nimport { buttonMessages, userMessages } from '@client/i18n/messages'\nimport differenceInMinutes from 'date-fns/differenceInMinutes'\nimport { AvatarLarge } from '@client/components/Avatar'\nimport { Button } from '@opencrvs/components/lib/Button'\nimport { Box, Link, Stack, Text, Toast } from '@opencrvs/components'\nimport { Icon } from '@opencrvs/components/lib/Icon'\n\nimport { BackgroundWrapper } from '@client/views/common/Common'\n\ninterface IState {\n  pin: string\n  resetKey: number\n}\n\ntype ErrorState = {\n  attempt: number\n  errorMessage: string\n}\ntype IFullState = IState & ErrorState\n\ntype Props = {\n  userDetails: UserDetails | null\n  redirectToAuthentication: typeof redirectToAuthentication\n}\ntype IFullProps = Props &\n  IntlShapeProps & {\n    onCorrectPinMatch: () => void\n    onForgetPin: () => void\n  }\n\nconst LogoutButton = styled(Button)`\n  position: absolute;\n  top: 8px;\n  right: 8px;\n`\n\nconst Content = styled(Stack)`\n  padding: 16px 0;\n`\n\nconst MAX_LOCK_TIME = 1\nconst MAX_ALLOWED_ATTEMPT = 3\n\nexport const EnterPinLabel = () => {\n  const intl = useIntl()\n  return (\n    <Text element=\"h1\" variant=\"h2\" align=\"center\">\n      {intl.formatMessage(userMessages.enterPinLabel)}\n    </Text>\n  )\n}\n\nclass UnlockView extends React.Component<IFullProps, IFullState> {\n  constructor(props: IFullProps) {\n    super(props)\n    this.state = {\n      attempt: 0,\n      errorMessage: '',\n      pin: '',\n      resetKey: Date.now()\n    }\n  }\n\n  componentDidMount() {\n    this.screenLockTimer()\n  }\n\n  showErrorMessage() {\n    return (\n      this.state.errorMessage && (\n        <Toast\n          type=\"error\"\n          id=\"errorMsg\"\n          onClose={() => this.setState({ errorMessage: '' })}\n        >\n          {this.state.errorMessage}\n        </Toast>\n      )\n    )\n  }\n\n  onPinProvided = async (pin: string) => {\n    const { intl } = this.props\n    const pinMatched = await pinValidator.isValidPin(pin)\n\n    if (this.state.attempt > MAX_ALLOWED_ATTEMPT) {\n      return\n    }\n\n    if (this.state.attempt === MAX_ALLOWED_ATTEMPT && !pinMatched) {\n      await storage.setItem(SECURITY_PIN_EXPIRED_AT, Date.now().toString())\n      this.setState((prevState) => {\n        return {\n          attempt: prevState.attempt + 1\n        }\n      })\n      this.screenLockTimer()\n      return\n    }\n\n    if (this.state.attempt < MAX_ALLOWED_ATTEMPT - 1 && !pinMatched) {\n      this.setState((preState) => ({\n        attempt: preState.attempt + 1,\n        errorMessage: intl.formatMessage(messages.incorrect),\n        resetKey: Date.now()\n      }))\n      return\n    }\n\n    if (this.state.attempt === MAX_ALLOWED_ATTEMPT - 1 && !pinMatched) {\n      this.setState((preState) => ({\n        attempt: preState.attempt + 1,\n        errorMessage: intl.formatMessage(messages.lastTry),\n        resetKey: Date.now()\n      }))\n      return\n    }\n\n    if (pinMatched) {\n      this.setState(() => ({\n        errorMessage: ''\n      }))\n      this.props.onCorrectPinMatch()\n      return\n    }\n  }\n\n  screenLockTimer = async () => {\n    const { intl } = this.props\n    const lockedAt = await storage.getItem(SECURITY_PIN_EXPIRED_AT)\n    if (lockedAt) {\n      const intervalID = setInterval(() => {\n        const currentTime = Date.now()\n        const timeDiff = differenceInMinutes(\n          currentTime,\n          parseInt(lockedAt, 10)\n        )\n        if (timeDiff < MAX_LOCK_TIME) {\n          if (this.state.attempt === MAX_ALLOWED_ATTEMPT + 2) {\n            return\n          }\n          this.setState((prevState) => ({\n            attempt: MAX_ALLOWED_ATTEMPT + 2,\n            errorMessage: intl.formatMessage(messages.locked)\n          }))\n        } else {\n          clearInterval(intervalID)\n          storage.setItem(SECURITY_PIN_EXPIRED_AT, '')\n          this.setState(() => ({\n            attempt: 0,\n            errorMessage: '',\n            resetKey: Date.now()\n          }))\n        }\n      }, 100)\n    }\n  }\n\n  logout = () => {\n    storage.removeItem(SCREEN_LOCK)\n    storage.removeItem(SECURITY_PIN_EXPIRED_AT)\n    this.props.redirectToAuthentication()\n  }\n\n  render() {\n    const { userDetails } = this.props\n    return (\n      <BackgroundWrapper id=\"unlockPage\">\n        <Box id=\"Box\">\n          <LogoutButton type=\"icon\" onClick={this.logout} id=\"logout\">\n            <Icon name=\"SignOut\" />\n          </LogoutButton>\n\n          <Content direction=\"column\" gap={0} justifyContent=\"flex-start\">\n            <AvatarLarge\n              name={getUserName(userDetails)}\n              avatar={userDetails?.avatar}\n            />\n            <EnterPinLabel />\n            <Stack direction=\"column\" gap={16} justifyContent=\"flex-start\">\n              <PINKeypad\n                onComplete={this.onPinProvided}\n                pin={this.state.pin}\n                key={this.state.resetKey}\n              />\n\n              <Button\n                size=\"small\"\n                type=\"tertiary\"\n                id=\"forgotten_pin\"\n                onClick={this.props.onForgetPin}\n              >\n                {this.props.intl.formatMessage(buttonMessages.forgottenPIN)}\n              </Button>\n            </Stack>\n          </Content>\n\n          {this.showErrorMessage()}\n        </Box>\n      </BackgroundWrapper>\n    )\n  }\n}\n\nexport const Unlock = connect(\n  (store: IStoreState) => ({\n    userDetails: getUserDetails(store)\n  }),\n  {\n    redirectToAuthentication\n  }\n)(injectIntl<'intl', IFullProps>(UnlockView))\n"
        }
    ]
}