{
    "sourceFile": "packages/client/src/views/RecordAudit/History.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1677236712025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1677502042919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,22 +251,12 @@\n           </Link>\n         )}\n       </>\n     ),\n-<<<<<<< HEAD\n-    role: isVerifiedAction(item) ? (\n-      <div />\n-    ) : isSystemInitiated(item) || !item.user?.systemRole ? (\n-      intl.formatMessage(getSystemType(item.system?.type))\n-    ) : (\n-      item.user.role.labels.find((label) => label.lang === 'en')?.label\n-    ),\n-=======\n     role:\n       isSystemInitiated(item) || !item.user?.systemRole\n         ? intl.formatMessage(getSystemType(item.system?.type))\n         : getUserRole(currentLanguage, item.user.role),\n->>>>>>> 23763c909 (ocrvs-4448: Show role label based on current language in record audit history (#4729))\n \n     location: isVerifiedAction(item) ? (\n       <div />\n     ) : isSystemInitiated(item) ? null : isFieldAgent ? (\n"
                }
            ],
            "date": 1677236712025,
            "name": "Commit-0",
            "content": "/*\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n *\n * OpenCRVS is also distributed under the terms of the Civil Registration\n * & Healthcare Disclaimer located at http://opencrvs.org/license.\n *\n * Copyright (C) The OpenCRVS Authors. OpenCRVS and the OpenCRVS\n * graphic logo are (registered/a) trademark(s) of Plan International.\n */\nimport React from 'react'\nimport { Table } from '@opencrvs/components/lib/Table'\nimport { Divider } from '@opencrvs/components/lib/Divider'\nimport styled from '@client/styledComponents'\nimport { ColumnContentAlignment } from '@opencrvs/components/lib/common-types'\nimport { constantsMessages, userMessages } from '@client/i18n/messages'\nimport {\n  getFormattedDate,\n  getPageItems,\n  getStatusLabel,\n  isSystemInitiated,\n  isVerifiedAction\n} from './utils'\nimport { Pagination } from '@opencrvs/components/lib/Pagination'\nimport { CMethodParams } from './ActionButtons'\nimport { GQLHumanName } from '@opencrvs/gateway/src/graphql/schema'\nimport { getIndividualNameObj } from '@client/utils/userUtils'\nimport { AvatarSmall } from '@client/components/Avatar'\nimport { FIELD_AGENT_ROLES } from '@client/utils/constants'\nimport { DOWNLOAD_STATUS, SUBMISSION_STATUS } from '@client/declarations'\nimport { useIntl } from 'react-intl'\nimport { Box } from '@opencrvs/components/lib/icons/Box'\nimport { v4 as uuid } from 'uuid'\nimport { History, Avatar, RegStatus, SystemType } from '@client/utils/gateway'\nimport { Link } from '@opencrvs/components'\nimport { integrationMessages } from '@client/i18n/messages/views/integrations'\nimport { getUserRole } from '@client/views/SysAdmin/Config/UserRoles/utils'\nimport { getLanguage } from '@client/i18n/selectors'\nimport { useSelector } from 'react-redux'\n\nconst TableDiv = styled.div`\n  overflow: auto;\n`\n\nconst Heading = styled.h3`\n  ${({ theme }) => theme.fonts.h3}\n  margin-bottom: 0px !important;\n`\n\nconst LargeGreyedInfo = styled.div`\n  height: 231px;\n  background-color: ${({ theme }) => theme.colors.grey200};\n  max-width: 100%;\n  border-radius: 4px;\n  margin: 15px 0px;\n`\n\nconst NameAvatar = styled.div`\n  display: flex;\n  align-items: center;\n  img {\n    margin-right: 10px;\n  }\n`\n\nconst HealthSystemLogo = styled.div`\n  border-radius: 100%;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  margin-right: 10px;\n  justify-content: center;\n  background-color: ${({ theme }) => theme.colors.grey200};\n`\n\nfunction HealthSystemUser({ name }: { name?: string }) {\n  const intl = useIntl()\n  return (\n    <NameAvatar>\n      <HealthSystemLogo>\n        <Box />\n      </HealthSystemLogo>\n      <span>{name ?? intl.formatMessage(userMessages.healthSystem)}</span>\n    </NameAvatar>\n  )\n}\n\nconst GetNameWithAvatar = ({\n  id,\n  nameObject,\n  avatar,\n  language\n}: {\n  id: string\n  nameObject: Array<GQLHumanName | null>\n  avatar: Avatar\n  language: string\n}) => {\n  const nameObj = getIndividualNameObj(nameObject, language)\n  const userName = nameObj\n    ? `${String(nameObj.firstNames)} ${String(nameObj.familyName)}`\n    : ''\n\n  return (\n    <NameAvatar>\n      <AvatarSmall avatar={avatar} name={userName} />\n      <span>{userName}</span>\n    </NameAvatar>\n  )\n}\n\nfunction getSystemType(type: string | undefined) {\n  if (type === SystemType.RecordSearch) {\n    return integrationMessages.recordSearch\n  }\n  return integrationMessages.healthSystem\n}\n\nconst getIndexByAction = (histories: any, index: number): number => {\n  const newHistories = [...histories]\n  newHistories.map((item) => {\n    item.uuid = uuid()\n    return item\n  })\n\n  const uid = newHistories[index].uuid\n  const actionIndex = newHistories\n    .filter((item) => item.action === newHistories[index].action)\n    .reverse()\n    .findIndex((item) => item.uuid === uid)\n\n  return actionIndex\n}\n\nexport const GetHistory = ({\n  intl,\n  draft,\n  goToUserProfile,\n  goToTeamUserList,\n  toggleActionDetails,\n  userDetails\n}: CMethodParams & {\n  toggleActionDetails: (actionItem: History, index?: number) => void\n  goToUserProfile: (user: string) => void\n}) => {\n  const [currentPageNumber, setCurrentPageNumber] = React.useState(1)\n  const isFieldAgent =\n    userDetails?.systemRole &&\n    FIELD_AGENT_ROLES.includes(userDetails.systemRole)\n      ? true\n      : false\n  const DEFAULT_HISTORY_RECORD_PAGE_SIZE = 10\n  const currentLanguage = useSelector(getLanguage)\n\n  const onPageChange = (currentPageNumber: number) =>\n    setCurrentPageNumber(currentPageNumber)\n  if (\n    !(draft?.downloadStatus === DOWNLOAD_STATUS.DOWNLOADED) &&\n    !(draft?.submissionStatus === SUBMISSION_STATUS.DRAFT)\n  )\n    return (\n      <>\n        <Divider />\n        <Heading>{intl.formatMessage(constantsMessages.history)}</Heading>\n        <LargeGreyedInfo />\n      </>\n    )\n  let allHistoryData = (draft.data.history || []) as unknown as {\n    [key: string]: any\n  }[]\n  if (!allHistoryData.length && userDetails) {\n    allHistoryData.unshift({\n      date: new Date(draft.savedOn || Date.now()).toString(),\n      regStatus: 'STARTED',\n      user: {\n        id: userDetails.userMgntUserID,\n        name: userDetails.name,\n        avatar: userDetails.avatar,\n        systemRole: userDetails.systemRole,\n        role: userDetails.role\n      },\n      office: userDetails.primaryOffice,\n      comments: [],\n      input: [],\n      output: []\n    })\n  }\n\n  if (!window.config.EXTERNAL_VALIDATION_WORKQUEUE) {\n    allHistoryData = allHistoryData.filter(({ regStatus }: History) => {\n      return regStatus !== RegStatus.WaitingValidation\n    })\n  }\n\n  // TODO: We need to figure out a way to sort the history in backend\n  const sortedHistory = allHistoryData.sort((fe, se) => {\n    return new Date(fe.date).getTime() - new Date(se.date).getTime()\n  })\n\n  const historiesForDisplay = getPageItems(\n    currentPageNumber,\n    DEFAULT_HISTORY_RECORD_PAGE_SIZE,\n    sortedHistory\n  )\n  const historyData = (historiesForDisplay as History[]).map((item, index) => ({\n    date: getFormattedDate(item?.date),\n    action: (\n      <Link\n        font=\"bold14\"\n        onClick={() => {\n          const actionIndex = getIndexByAction(historiesForDisplay, index)\n          toggleActionDetails(item, actionIndex)\n        }}\n      >\n        {getStatusLabel(\n          item.action,\n          item.regStatus,\n          intl,\n          item.user,\n          userDetails\n        )}\n      </Link>\n    ),\n    user: (\n      <>\n        {isVerifiedAction(item) ? (\n          <div />\n        ) : isSystemInitiated(item) ? (\n          <HealthSystemUser name={item.system?.name} />\n        ) : isFieldAgent ? (\n          <GetNameWithAvatar\n            id={item?.user?.id as string}\n            nameObject={item?.user?.name as (GQLHumanName | null)[]}\n            avatar={item.user?.avatar as Avatar}\n            language={window.config.LANGUAGES}\n          />\n        ) : (\n          <Link\n            id=\"profile-link\"\n            font=\"bold14\"\n            onClick={() => goToUserProfile(String(item?.user?.id))}\n          >\n            <GetNameWithAvatar\n              id={item?.user?.id as string}\n              nameObject={item?.user?.name as (GQLHumanName | null)[]}\n              avatar={item.user?.avatar as Avatar}\n              language={window.config.LANGUAGES}\n            />\n          </Link>\n        )}\n      </>\n    ),\n    role:\n      isSystemInitiated(item) || !item.user?.systemRole\n        ? intl.formatMessage(getSystemType(item.system?.type))\n        : item.user.role.labels.find((label) => label.lang === 'en')?.label,\n\n    location: isVerifiedAction(item) ? (\n      <div />\n    ) : isSystemInitiated(item) ? null : isFieldAgent ? (\n      <>{item.office?.name}</>\n    ) : (\n      <Link\n        font=\"bold14\"\n        onClick={() => {\n          goToTeamUserList && goToTeamUserList(item?.office?.id as string)\n        }}\n      >\n        {item.office?.name as string}\n      </Link>\n    )\n  }))\n\n  const columns = [\n    {\n      label: intl.formatMessage(constantsMessages.action),\n      width: 22,\n      key: 'action'\n    },\n    {\n      label: intl.formatMessage(constantsMessages.date),\n      width: 22,\n      key: 'date'\n    },\n    {\n      label: intl.formatMessage(constantsMessages.by),\n      width: 22,\n      key: 'user',\n      isIconColumn: true,\n      ICON_ALIGNMENT: ColumnContentAlignment.LEFT\n    },\n    {\n      label: intl.formatMessage(constantsMessages.labelRole),\n      width: 15,\n      key: 'role'\n    },\n    {\n      label: intl.formatMessage(constantsMessages.location),\n      width: 20,\n      key: 'location'\n    }\n  ]\n  return (\n    <>\n      <Divider />\n      <Heading>{intl.formatMessage(constantsMessages.history)}</Heading>\n      <TableDiv>\n        <Table\n          id=\"task-history\"\n          fixedWidth={1088}\n          noResultText=\"\"\n          columns={columns}\n          content={historyData}\n          highlightRowOnMouseOver\n          pageSize={DEFAULT_HISTORY_RECORD_PAGE_SIZE}\n        />\n        {allHistoryData.length > DEFAULT_HISTORY_RECORD_PAGE_SIZE && (\n          <Pagination\n            currentPage={currentPageNumber}\n            totalPages={Math.ceil(\n              allHistoryData.length / DEFAULT_HISTORY_RECORD_PAGE_SIZE\n            )}\n            onPageChange={onPageChange}\n          />\n        )}\n      </TableDiv>\n    </>\n  )\n}\n"
        }
    ]
}