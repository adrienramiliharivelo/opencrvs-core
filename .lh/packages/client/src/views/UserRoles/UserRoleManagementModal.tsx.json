{
    "sourceFile": "packages/client/src/views/UserRoles/UserRoleManagementModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1677231424486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1677231424486,
            "name": "Commit-0",
            "content": "/*\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n *\n * OpenCRVS is also distributed under the terms of the Civil Registration\n * & Healthcare Disclaimer located at http://opencrvs.org/license.\n *\n * Copyright (C) The OpenCRVS Authors. OpenCRVS and the OpenCRVS\n * graphic logo are (registered/a) trademark(s) of Plan International.\n */\n\nimport React, { useState } from 'react'\nimport { Text } from '@opencrvs/components/lib/Text'\nimport { ResponsiveModal, Select, Stack, TextInput } from '@opencrvs/components'\nimport { Button } from '@opencrvs/components/lib/Button'\nimport { buttonMessages } from '@client/i18n/messages'\nimport { useIntl } from 'react-intl'\nimport { Icon } from '@opencrvs/components/lib/Icon'\nimport styled from '@client/styledComponents'\nimport { getAvailableLanguages } from '@client/i18n/utils'\nimport { useSelector } from 'react-redux'\nimport { getLanguages } from '@client/i18n/selectors'\nimport { getUserSystemRole } from '@client/views/SysAdmin/Team/utils'\nimport { messages } from '@client/i18n/messages/views/config'\nimport _ from 'lodash'\nimport {\n  ISystemRole,\n  RolesInput\n} from '@client/views/SysAdmin/Config/UserRoles/UserRoles'\n\nconst StyledTextInput = styled(TextInput)`\n  ${({ theme }) => theme.fonts.reg14};\n  height: 40px;\n  border: solid 1px ${({ theme }) => theme.colors.grey600};\n  align-self: center;\n\n  :disabled {\n    border-color: ${({ theme }) => theme.colors.grey300};\n    color: ${({ theme }) => theme.colors.grey500};\n  }\n`\n\ninterface ILanguageOptions {\n  [key: string]: string\n}\n\ninterface IProps {\n  systemRole: ISystemRole\n  closeCallback: (result: RolesInput | null) => void\n}\n\nconst LanguageSelect = styled(Select)`\n  width: 175px;\n  border-radius: 2px;\n\n  .react-select__control {\n    max-height: 32px;\n    min-height: 32px;\n  }\n\n  .react-select__value-container {\n    display: block;\n  }\n\n  div {\n    ${({ theme }) => theme.fonts.reg14};\n    color: ${({ theme }) => theme.colors.primaryDark};\n  }\n`\n\nfunction stripTypenameFromRoles(roles: ISystemRole['roles']) {\n  return roles.map(({ __typename, ...rest }) => ({\n    ...rest,\n    labels: rest.labels.map(({ __typename, ...rest }) => rest)\n  }))\n}\n\nexport function UserRoleManagementModal(props: IProps) {\n  const [userRoles, setUserRoles] = useState<RolesInput>(\n    stripTypenameFromRoles(props.systemRole.roles)\n  )\n  const [currentLanguage, setCurrentLanguage] = useState<string>('en')\n  const [currentClipBoard, setCurrentClipBoard] = useState<string>('')\n  const intl = useIntl()\n  const [actives, setActives] = useState(new Array(userRoles.length).fill(true))\n\n  const availableLangs = getAvailableLanguages()\n  const languages = useSelector(getLanguages)\n  const langChoice = availableLangs.reduce<ILanguageOptions[]>(\n    (choices, lang) =>\n      languages[lang]\n        ? [\n            ...choices,\n            {\n              value: lang,\n              label: languages[lang].displayName\n            }\n          ]\n        : choices,\n    []\n  )\n\n  const isRoleUpdateValid = () => {\n    if (_.isEqual(userRoles, stripTypenameFromRoles(props.systemRole.roles))) {\n      return false\n    }\n    const inCompleteRoleEntries = userRoles.filter((role) => {\n      for (const label of role.labels) {\n        if (label.label === '') {\n          return true\n        }\n      }\n      return false\n    })\n\n    if (inCompleteRoleEntries.length > 0) {\n      return false\n    }\n    return true\n  }\n\n  const updateRole = () => {\n    const newLabels = availableLangs.map((lang) => {\n      if (lang === currentLanguage) {\n        return {\n          lang: currentLanguage,\n          label: currentClipBoard\n        }\n      }\n      return { lang: lang, label: '' }\n    })\n\n    setUserRoles([...userRoles, { labels: newLabels }])\n    setCurrentClipBoard('')\n    setActives(new Array(userRoles.length).fill(false))\n  }\n\n  return (\n    <ResponsiveModal\n      key={props.systemRole.id}\n      title={\n        getUserSystemRole({ systemRole: props.systemRole.value }, intl) || ''\n      }\n      autoHeight\n      responsive={false}\n      actions={[\n        <Button\n          type=\"tertiary\"\n          id=\"cancel\"\n          key=\"cancel\"\n          onClick={() => {\n            props.closeCallback(null)\n          }}\n        >\n          {intl.formatMessage(buttonMessages.cancel)}\n        </Button>,\n        <Button\n          type=\"primary\"\n          key=\"confirm\"\n          id=\"confirm\"\n          disabled={!isRoleUpdateValid()}\n          onClick={() => {\n            props.closeCallback(userRoles)\n          }}\n        >\n          {intl.formatMessage(buttonMessages.apply)}\n        </Button>\n      ]}\n      show={true}\n      handleClose={() => props.closeCallback(null)}\n    >\n      <Text variant=\"reg16\" element=\"p\" color=\"grey500\">\n        {intl.formatMessage(messages.roleUpdateInstruction, {\n          systemRole:\n            getUserSystemRole({ systemRole: props.systemRole.value }, intl) ||\n            ''\n        })}\n      </Text>\n\n      <Stack direction=\"column\" alignItems=\"stretch\">\n        <LanguageSelect\n          id=\"SelectLanguage\"\n          onChange={(val: string) => {\n            setCurrentLanguage(val)\n          }}\n          value={currentLanguage}\n          options={langChoice}\n          placeholder=\"\"\n        />\n        {userRoles.map((item, index) => {\n          return (\n            <Stack justifyContent=\"flex-start\">\n              <StyledTextInput\n                id=\"roleNameInput\"\n                value={\n                  item.labels.find((e) => e.lang === currentLanguage)?.label ||\n                  ''\n                }\n                isDisabled={actives[index]}\n                focusInput={!actives[index]}\n                onChange={(e) => {\n                  const newUserRoles = userRoles.map((userRole, idx) => {\n                    if (index !== idx) return userRole\n                    return {\n                      ...userRole,\n                      labels: userRole.labels.map((label) => {\n                        if (label.lang === currentLanguage) {\n                          return { ...label, label: e.target.value }\n                        }\n                        return label\n                      })\n                    }\n                  })\n                  setUserRoles(newUserRoles)\n                }}\n                onBlur={() =>\n                  setActives(new Array(userRoles.length).fill(true))\n                }\n              />\n              {actives[index] && (\n                <Button\n                  id=\"editButton\"\n                  type=\"icon\"\n                  onClick={() => {\n                    const newActiveItems = new Array(userRoles.length).fill(\n                      true\n                    )\n                    newActiveItems[index] = false\n                    setActives(newActiveItems)\n                  }}\n                >\n                  <Icon name=\"Pencil\" color=\"primary\" />\n                </Button>\n              )}\n            </Stack>\n          )\n        })}\n\n        <Stack justifyContent=\"flex-start\">\n          <StyledTextInput\n            placeholder=\"Add new role here\"\n            value={currentClipBoard}\n            onChange={(e) => {\n              setCurrentClipBoard(e.target.value)\n            }}\n          />\n          <Button disabled={!currentClipBoard} type=\"icon\" onClick={updateRole}>\n            <Icon name=\"Plus\" color=\"primary\" />\n          </Button>\n        </Stack>\n      </Stack>\n    </ResponsiveModal>\n  )\n}\n"
        }
    ]
}